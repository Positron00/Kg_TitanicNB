# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_TitanicDataset.ipynb.

# %% auto 0
__all__ = ['dataPath', 'train_data', 'test_data', 'run', 'artifact']

# %% ../nbs/01_TitanicDataset.ipynb 2
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import os # interact with system directories and files
import wandb # log data and models with Weights and Biases
# import weave # interactive analytics

# %load_ext autoreload
# %autoreload 2

# %% ../nbs/01_TitanicDataset.ipynb 3
dataPath = '/Users/danc/Data/titanic'
for dirname, _, filenames in os.walk(dataPath):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# %% ../nbs/01_TitanicDataset.ipynb 4
train_data = pd.read_csv(os.path.join(dirname, 'train.csv'))
train_data.head()

# %% ../nbs/01_TitanicDataset.ipynb 6
test_data = pd.read_csv(os.path.join(dirname, 'test.csv'))
test_data.head()

# %% ../nbs/01_TitanicDataset.ipynb 8
#from sklearn.impute import SimpleImputer
#imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
#imputer.fit([train_data['Age']])
#age_imputed = imputer.transform([train_data['Age']])
#train_data['Age'] = [age_imputed]

#from sklearn.experimental import enable_iterative_imputer
#from sklearn.impute import IterativeImputer
#imp = IterativeImputer(max_iter=10, random_state=0)
#imp.fit([train_data['Age'],train_data['Pclass']])
#t_transfm = imp.transform([train_data['Age'],train_data['Pclass']])
#train_data['Age'] = t_transfm[:,0]
#train_data['Pclass'] = t_transfm[:,1]

# %% ../nbs/01_TitanicDataset.ipynb 13
wandb.login() # log in Weights and Biases to upload and log data

# %% ../nbs/01_TitanicDataset.ipynb 14
run = wandb.init(project="Kaggle_Titanic", job_type="add-dataset")
artifact = wandb.Artifact(name="Titanic_data", type="dataset")
artifact.add_dir(local_path=dataPath)  # Add dataset directory to artifact
run.log_artifact(artifact)  # Logs the artifact version "Titanic_data:v0"
run.finish()
